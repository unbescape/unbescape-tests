/*
 * =============================================================================
 * 
 *   Copyright (c) 2014-2025 Unbescape (http://www.unbescape.org)
 * 
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 * 
 *       http://www.apache.org/licenses/LICENSE-2.0
 * 
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 * 
 * =============================================================================
 */
package org.unbescape.javascript;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

/**
 * 
 * @author Daniel Fern&aacute;ndez
 * 
 * @since 1.0
 *
 */
public class AuxEscapeTest {







    @Test
    public void testToUHexa() throws Exception {

        {
            final String uhexa2FF =


            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0; i <= 0x02FF; i++) {
                strBuilder.append(JavaScriptEscapeUtil.toUHexa(i));
            }

            final String result = strBuilder.toString();
            Assertions.assertEquals(uhexa2FF, result);
        }

        {
            final String uhexaFFFF =
                    "FE00FE01FE02FE03FE04FE05FE06FE07FE08FE09FE0AFE0BFE0CFE0DFE0EFE0FFE10FE11FE12FE13FE14FE15FE16FE17FE18FE19FE1AFE1BFE1CFE1DFE1EFE1FFE20FE21FE22FE23FE24FE25FE26FE27FE28FE29FE2AFE2BFE2CFE2DFE2EFE2FFE30FE31FE32FE33FE34FE35FE36FE37FE38FE39FE3AFE3BFE3CFE3DFE3EFE3FFE40FE41FE42FE43FE44FE45FE46FE47FE48FE49FE4AFE4BFE4CFE4DFE4EFE4FFE50FE51FE52FE53FE54FE55FE56FE57FE58FE59FE5AFE5BFE5CFE5DFE5EFE5FFE60FE61FE62FE63FE64FE65FE66FE67FE68FE69FE6AFE6BFE6CFE6DFE6EFE6FFE70FE71FE72FE73FE74FE75FE76FE77FE78FE79FE7AFE7BFE7CFE7DFE7EFE7FFE80FE81FE82FE83FE84FE85FE86FE87FE88FE89FE8AFE8BFE8CFE8DFE8EFE8FFE90FE91FE92FE93FE94FE95FE96FE97FE98FE99FE9AFE9BFE9CFE9DFE9EFE9FFEA0FEA1FEA2FEA3FEA4FEA5FEA6FEA7FEA8FEA9FEAAFEABFEACFEADFEAEFEAFFEB0FEB1FEB2FEB3FEB4FEB5FEB6FEB7FEB8FEB9FEBAFEBBFEBCFEBDFEBEFEBFFEC0FEC1FEC2FEC3FEC4FEC5FEC6FEC7FEC8FEC9FECAFECBFECCFECDFECEFECFFED0FED1FED2FED3FED4FED5FED6FED7FED8FED9FEDAFEDBFEDCFEDDFEDEFEDFFEE0FEE1FEE2FEE3FEE4FEE5FEE6FEE7FEE8FEE9FEEAFEEBFEECFEEDFEEEFEEFFEF0FEF1FEF2FEF3FEF4FEF5FEF6FEF7FEF8FEF9FEFAFEFBFEFCFEFDFEFEFEFFFF00FF01FF02FF03FF04FF05FF06FF07FF08FF09FF0AFF0BFF0CFF0DFF0EFF0FFF10FF11FF12FF13FF14FF15FF16FF17FF18FF19FF1AFF1BFF1CFF1DFF1EFF1FFF20FF21FF22FF23FF24FF25FF26FF27FF28FF29FF2AFF2BFF2CFF2DFF2EFF2FFF30FF31FF32FF33FF34FF35FF36FF37FF38FF39FF3AFF3BFF3CFF3DFF3EFF3FFF40FF41FF42FF43FF44FF45FF46FF47FF48FF49FF4AFF4BFF4CFF4DFF4EFF4FFF50FF51FF52FF53FF54FF55FF56FF57FF58FF59FF5AFF5BFF5CFF5DFF5EFF5FFF60FF61FF62FF63FF64FF65FF66FF67FF68FF69FF6AFF6BFF6CFF6DFF6EFF6FFF70FF71FF72FF73FF74FF75FF76FF77FF78FF79FF7AFF7BFF7CFF7DFF7EFF7FFF80FF81FF82FF83FF84FF85FF86FF87FF88FF89FF8AFF8BFF8CFF8DFF8EFF8FFF90FF91FF92FF93FF94FF95FF96FF97FF98FF99FF9AFF9BFF9CFF9DFF9EFF9FFFA0FFA1FFA2FFA3FFA4FFA5FFA6FFA7FFA8FFA9FFAAFFABFFACFFADFFAEFFAFFFB0FFB1FFB2FFB3FFB4FFB5FFB6FFB7FFB8FFB9FFBAFFBBFFBCFFBDFFBEFFBFFFC0FFC1FFC2FFC3FFC4FFC5FFC6FFC7FFC8FFC9FFCAFFCBFFCCFFCDFFCEFFCFFFD0FFD1FFD2FFD3FFD4FFD5FFD6FFD7FFD8FFD9FFDAFFDBFFDCFFDDFFDEFFDFFFE0FFE1FFE2FFE3FFE4FFE5FFE6FFE7FFE8FFE9FFEAFFEBFFECFFEDFFEEFFEFFFF0FFF1FFF2FFF3FFF4FFF5FFF6FFF7FFF8FFF9FFFAFFFBFFFCFFFDFFFEFFFF";

            final StringBuilder strBuilder = new StringBuilder();
            for (int i = 0xFE00; i <= 0xFFFF; i++) {
                strBuilder.append(JavaScriptEscapeUtil.toUHexa(i));
            }

            final String result = strBuilder.toString();
            Assertions.assertEquals(uhexaFFFF, result);
        }

    }



    @Test
    public void testToXHexa() throws Exception {

        final String xhexa =
                "000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F" +
                "202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F" +
                "404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F" +
                "606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F" +
                "808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F" +
                "A0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF" +
                "C0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF" +
                "E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF";

        final StringBuilder strBuilder = new StringBuilder();
        for (int i = 0; i <= 0xFF; i++) {
            strBuilder.append(JavaScriptEscapeUtil.toXHexa(i));
        }

        final String result = strBuilder.toString();
        Assertions.assertEquals(xhexa, result);

    }




    private static void isOctalEscape(final String text, final int start, final int end) throws Exception {
        Assertions.assertTrue(JavaScriptEscapeUtil.isOctalEscape(text, start, end));
        Assertions.assertTrue(JavaScriptEscapeUtil.isOctalEscape(text.toCharArray(), start, end));
    }

    private static void isNotOctalEscape(final String text, final int start, final int end) throws Exception {
        Assertions.assertFalse(JavaScriptEscapeUtil.isOctalEscape(text, start, end));
        Assertions.assertFalse(JavaScriptEscapeUtil.isOctalEscape(text.toCharArray(), start, end));
    }



    @Test
    public void testIsOctalEscape() throws Exception {

        isNotOctalEscape("0", 0, 1);
        isOctalEscape("1", 0, 1);
        isNotOctalEscape("8", 0, 1);
        isNotOctalEscape("a0", 1, 2);
        isNotOctalEscape("a00", 1, 2);
        isNotOctalEscape("a00", 1, 3);
        isNotOctalEscape("a000", 1, 4);
        isOctalEscape("a001", 1, 4);
        isOctalEscape("a01", 1, 3);
        isNotOctalEscape("0a", 0, 1);
        isNotOctalEscape("a0a", 1, 2);
        isNotOctalEscape("a00a", 1, 2);
        isNotOctalEscape("a00a", 1, 3);
        isNotOctalEscape("a000a", 1, 4);
        isOctalEscape("a001a", 1, 4);
        isOctalEscape("a01a", 1, 3);
        isNotOctalEscape("a001a", 1, 3);
        isOctalEscape("01", 0, 2);
        isOctalEscape("a001a", 1, 4);
        isOctalEscape("a01a", 1, 4);
        isNotOctalEscape("a00a", 1, 4);
        isNotOctalEscape("a008a", 1, 4);

    }




    public AuxEscapeTest() {
        super();
    }


}

